[package]
name = "fidget"
version = "0.3.5"
edition = "2021"
license = "MPL-2.0"
repository = "https://github.com/mkeeter/fidget"
description = "Infrastructure for complex closed-form implicit surfaces"
authors = ["Matt Keeter <matt.j.keeter@gmail.com"]
readme = "../README.md"

[dependencies]
arrayvec.workspace = true
bimap.workspace = true
crossbeam-deque.workspace = true
document-features.workspace = true
nalgebra.workspace = true
num-traits.workspace = true
ordered-float.workspace = true
rand.workspace = true
rayon.workspace = true
serde.workspace = true
static_assertions.workspace = true
thiserror.workspace = true

rhai = { workspace = true, optional = true }

workspace-hack = { version = "0.1", path = "../workspace-hack" }

# JIT
dynasmrt = { workspace = true, optional = true }
libc = { workspace = true, optional = true }

[target.'cfg(target_os = "windows")'.dependencies]
windows.workspace = true

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom.workspace = true

[features]
default = ["jit", "rhai"]

## Enables fast evaluation via a JIT compiler.  This is exposed in the
## [`fidget::jit`](crate::jit) module, and is supported on macOS, Linux, and
## Windows (i.e. all supported platforms except WebAssembly).  There's no way to
## disable the feature on specific platforms
## ([Cargo issue](https://github.com/rust-lang/cargo/issues/1197));
## users will have to disable it manually via `default-features = false`.
jit = ["dep:dynasmrt", "dep:libc"]

## Enable [Rhai](https://rhai.rs/) bindings, in the
## [`fidget::rhai`](crate::rhai) module
rhai = ["dep:rhai"]

## Enable `eval-tests` if you're writing your own evaluators and want to
## unit-test them.  When enabled, the crate exports a set of macros to test each
## evaluator type, e.g. `float_slice_tests!(...)`.
eval-tests = []

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
approx = "0.5.1"

[[bench]]
name = "render"
harness = false

[[bench]]
name = "mesh"
harness = false

[[bench]]
name = "function_call"
harness = false

[lib]
bench = false
